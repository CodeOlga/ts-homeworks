// –û—Å—å –î–ó –ø–æ —Ç–µ–º—ñ –ó–∞—Ö–∏—Å–Ω–∏–∫–∏ —Ç–∏–ø—ñ–≤:

// –£ –≤–∞—Å —î —Å—É—Ç–Ω—ñ—Å—Ç—å - –ö–æ–º–ø–∞–Ω—ñ—è, —è–∫–∞ –º–∞—î –Ω–∞–∑–≤—É, —Å–ø–∏—Å–æ–∫ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ñ–≤,
// —Å–ø–∏—Å–æ–∫ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –Ω–∞–π–Ω—è—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É, –∞ —Ç–∞–∫–æ–∂ —Å–ø–∏—Å–æ–∫ —É—Å—å–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É –∫–æ–º–ø–∞–Ω—ñ—ó
// - —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –≤—Å—ñ—Ö –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ñ–≤ —ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –Ω–∞–π–Ω—è—Ç—ñ.

// –°—É—Ç–Ω—ñ—Å—Ç—å –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç - –º–∞—î –Ω–∞–∑–≤—É, –¥–æ–º–µ–Ω–Ω—É –æ–±–ª–∞—Å—Ç—å, —Å–ø–∏—Å–æ–∫ —Å–≤–æ—ó—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
// —ñ –±—é–¥–∂–µ—Ç, —â–æ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –¥–µ–±—ñ—Ç—É —ñ –∫—Ä–µ–¥–∏—Ç—É. –¢–∞–∫ —Å–∞–º–æ —É –Ω–µ—ó —ñ—Å–Ω—É—é—Ç—å –º–µ—Ç–æ–¥–∏
// –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≤–∏—Ö–æ–¥—è—á–∏ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É, –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤,
// —è–∫–∏–π –≤—Ä–∞—Ö–æ–≤—É—î –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –Ω–∞–π–Ω—è—Ç–æ–≥–æ –Ω–∞ –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞
// –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –∑ –º–∏–Ω—É–ª–æ–≥–æ –≤—ñ–¥–¥—ñ–ª—É.

// –°—É—Ç–Ω—ñ—Å—Ç—å –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –Ω–∞–π–Ω—è—Ç–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –º–∞—î —ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ, –∑–∞—Ä–ø–ª–∞—Ç–∞
// —Ç–∞ –Ω–æ–º–µ—Ä –±–∞–Ω–∫—ñ–≤—Å—å–∫–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É.

// –°—É—Ç–Ω—ñ—Å—Ç—å –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ - —ñ–º'—è, –ø—Ä—ñ–∑–≤–∏—â–µ, –ø–ª–∞—Ç—ñ–∂–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –∑–∞—Ä–ø–ª–∞—Ç—É, —Å—Ç–∞—Ç—É—Å
// (–∞–∫—Ç–∏–≤–Ω–∏–π, –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π, —É –Ω–µ–æ–ø–ª–∞—á—É–≤–∞–Ω—ñ–π –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ) —ñ –∑–Ω–∞–Ω–Ω—è –ø—Ä–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç, –¥–æ —è–∫–æ–≥–æ –≤—ñ–Ω –ø—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–∏–π.

// –¢–∞–∫ —Å–∞–º–æ —É –Ω–∞—Å —î —Å—É—Ç–Ω—ñ—Å—Ç—å –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—è, —è–∫–∞ —î –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–º —ñ –º–∞—î –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å –±–∞–ª–∞–Ω—Å,
// –∞ —Ç–∞–∫–æ–∂ –º–µ—Ç–æ–¥–∏ –¥–ª—è –≤–∑—è—Ç—Ç—è –Ω–∞ –±–∞–ª–∞–Ω—Å —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –∞–±–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É,
// –∑–Ω—è—Ç—Ç—è –∑ –±–∞–ª–∞–Ω—Å—É —ñ –≤–∏–ø–ª–∞—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç–∏ –¥–ª—è –≤—Å—å–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—É.

// –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –Ω–∞–π–Ω—è—Ç—ñ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –æ—Ç—Ä–∏–º—É—é—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –æ–ø–ª–∞—Ç,
// –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ (—Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ) - –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ—Ö.

// –¢–∏–ø–∏ —Ç–∞ –ø–µ—Ä–µ—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
type PaymentInfo = {
  bankAccountNumber: string;
};

type Budget = {
  debit: number;
  credit: number;
};

enum EmployeeStatus {
  Active = 'active',
  Inactive = 'inactive',
  UnpaidLeave = 'unpaid_leave',
}

// –ü–æ–ø–µ—Ä–µ–¥–Ω—å–æ –Ω–∞–π–Ω—è—Ç–∏–π —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫
class PreHiredEmployee {
  constructor(
    public firstName: string,
    public lastName: string,
    public salary: number,
    public bankAccountNumber: string
  ) {}
}

// –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫
class Employee {
  constructor(
    public firstName: string,
    public lastName: string,
    public salary: number,
    public paymentInfo: PaymentInfo,
    public status: EmployeeStatus,
    public department: Department
  ) {}
}

// –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
class Department {
  employees: Employee[] = [];

  constructor(
    public name: string,
    public domain: string,
    public budget: Budget
  ) {}

  getBalance(): number {
    return this.budget.credit - this.budget.debit;
  }

  addEmployee(preHired: PreHiredEmployee): Employee {
    const newEmployee = new Employee(
      preHired.firstName,
      preHired.lastName,
      preHired.salary,
      { bankAccountNumber: preHired.bankAccountNumber },
      EmployeeStatus.Active,
      this
    );
    this.employees.push(newEmployee);
    this.budget.debit += preHired.salary;
    return newEmployee;
  }

  removeEmployee(employee: Employee) {
    this.employees = this.employees.filter(e => e !== employee);
    this.budget.debit -= employee.salary;
  }
}

// –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—è
class Accounting extends Department {
  balance: number = 0;

  takeOnBalance(entity: Department | Employee) {
    if (entity instanceof Department) {
      this.balance += entity.getBalance();
    } else if (entity instanceof Employee) {
      this.balance += entity.salary;
    }
  }

  removeFromBalance(entity: Department | Employee) {
    if (entity instanceof Department) {
      this.balance -= entity.getBalance();
    } else if (entity instanceof Employee) {
      this.balance -= entity.salary;
    }
  }

  paySalaries(employees: (Employee | PreHiredEmployee)[]) {
    for (const person of employees) {
      if (person instanceof Employee && person.status === EmployeeStatus.Active) {
        this.balance -= person.salary;
        console.log(`üíµ Paid salary to employee: ${person.firstName}`);
      } else if (person instanceof PreHiredEmployee) {
        console.log(`üåê External payment to pre-hired: ${person.firstName}`);
      }
    }
  }
}

// –ö–æ–º–ø–∞–Ω—ñ—è
class Company {
  departments: Department[] = [];
  preHiredEmployees: PreHiredEmployee[] = [];
  allEmployees: (Employee | PreHiredEmployee)[] = [];

  constructor(public name: string) {}

  addDepartment(dep: Department) {
    this.departments.push(dep);
  }

  hire(preHired: PreHiredEmployee, department: Department) {
    const employee = department.addEmployee(preHired);
    this.allEmployees.push(employee);
    this.preHiredEmployees = this.preHiredEmployees.filter(e => e !== preHired);
  }

  addPreHired(preHired: PreHiredEmployee) {
    this.preHiredEmployees.push(preHired);
    this.allEmployees.push(preHired);
  }
}

// === –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ===

// –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–º–ø–∞–Ω—ñ—é
const myCompany = new Company('NextGen Tech');

// –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏
const devDepartment = new Department('Development', 'dev.nextgen.com', {
  debit: 0,
  credit: 100000,
});
const accounting = new Accounting('Accounting', 'accounting.nextgen.com', {
  debit: 0,
  credit: 50000,
});

// –î–æ–¥–∞—î–º–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∏ –≤ –∫–æ–º–ø–∞–Ω—ñ—é
myCompany.addDepartment(devDepartment);
myCompany.addDepartment(accounting);

// –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –Ω–∞–π–Ω—è—Ç–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
const preHired1 = new PreHiredEmployee('Olga', 'Ivanenko', 3000, 'UA123456');
const preHired2 = new PreHiredEmployee('Petro', 'Shevchenko', 3500, 'UA654321');

myCompany.addPreHired(preHired1);
myCompany.addPreHired(preHired2);

// –ù–∞–π–º–∞—î–º–æ –æ–¥–Ω–æ–≥–æ –∑ –Ω–∏—Ö —É Development
myCompany.hire(preHired1, devDepartment);

// Accounting –±–µ—Ä–µ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å
accounting.takeOnBalance(devDepartment);

// Accounting –≤–∏–ø–ª–∞—á—É—î –∑–∞—Ä–ø–ª–∞—Ç–∏
accounting.paySalaries(myCompany.allEmployees);

// –í–∏–≤–æ–¥–∏–º–æ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –±—É—Ö–≥–∞–ª—Ç–µ—Ä—ñ—ó
console.log(`üìä Accounting balance: ${accounting.balance}`);

// –í–∏–¥–∞–ª—è—î–º–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –∑—ñ —Å–ø–∏—Å–∫—É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É
devDepartment.removeEmployee(devDepartment.employees[0]);

// –ó–Ω–æ–≤—É –æ–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
accounting.removeFromBalance(devDepartment);
console.log(`üìâ Accounting balance after removal: ${accounting.balance}`);
